TestCase subclass: #ALGraphTest	instanceVariableNames: ''	classVariableNames: ''	package: 'CPSC3223-Hw5-Tests'!!ALGraphTest methodsFor: 'sample graphs' stamp: 'CDavidShaffer 9/5/2019 15:47'!aGraphWithLoops	"Used by various tests"		| g v |	g := self graphSpecies new.	v := OrderedCollection new.	v add: (g insertVertexContaining: 'A').	v add: (g insertVertexContaining: 'B').	v add: (g insertVertexContaining: 'C').	v add: (g insertVertexContaining: 'D').	v add: (g insertVertexContaining: 'E').	g		insertEdgeConnecting: (v at: 1)		and: (v at: 2)		containing: '1'.	g		insertEdgeConnecting: (v at: 1)		and: (v at: 3)		containing: '2'.	g		insertEdgeConnecting: (v at: 2)		and: (v at: 2)		containing: '3'.	g		insertEdgeConnecting: (v at: 4)		and: (v at: 5)		containing: '4'.	g		insertEdgeConnecting: (v at: 5)		and: (v at: 1)		containing: '5'.	g		insertEdgeConnecting: (v at: 3)		and: (v at: 5)		containing: '6'.	g		insertEdgeConnecting: (v at: 2)		and: (v at: 2)		containing: '7'.	^g! !!ALGraphTest methodsFor: 'sample graphs' stamp: 'CDavidShaffer 9/5/2019 15:47'!aGraphWithParallelEdges	"Used by various tests"		| g v |	g := self graphSpecies new.	v := OrderedCollection new.	v add: (g insertVertexContaining: 'A').	v add: (g insertVertexContaining: 'B').	v add: (g insertVertexContaining: 'C').	v add: (g insertVertexContaining: 'D').	v add: (g insertVertexContaining: 'E').	g		insertEdgeConnecting: (v at: 1)		and: (v at: 2)		containing: '1'.	g		insertEdgeConnecting: (v at: 2)		and: (v at: 1)		containing: '2'.	g		insertEdgeConnecting: (v at: 2)		and: (v at: 3)		containing: '3'.	g		insertEdgeConnecting: (v at: 4)		and: (v at: 5)		containing: '4'.	g		insertEdgeConnecting: (v at: 3)		and: (v at: 5)		containing: '5'.	^g! !!ALGraphTest methodsFor: 'sample graphs' stamp: 'CDavidShaffer 9/5/2019 15:47'!aCompleteGraph	"Used by various tests"		| g v |	g := self graphSpecies new.	v := OrderedCollection new.	v add: (g insertVertexContaining: 'A').	v add: (g insertVertexContaining: 'B').	v add: (g insertVertexContaining: 'C').	g		insertEdgeConnecting: (v at: 1)		and: (v at: 2)		containing: '1'.	g		insertEdgeConnecting: (v at: 1)		and: (v at: 3)		containing: '2'.	g		insertEdgeConnecting: (v at: 2)		and: (v at: 3)		containing: '4'.	^g! !!ALGraphTest methodsFor: 'sample graphs' stamp: 'CDavidShaffer 9/5/2019 15:48'!anAlmostCompleteGraphWithLoops	"Used by various tests"		| g v |	g := self graphSpecies new.	v := OrderedCollection new.	v add: (g insertVertexContaining: 'A').	v add: (g insertVertexContaining: 'B').	v add: (g insertVertexContaining: 'C').	v add: (g insertVertexContaining: 'D').	g		insertEdgeConnecting: (v at: 1)		and: (v at: 2)		containing: '1'.	g		insertEdgeConnecting: (v at: 1)		and: (v at: 3)		containing: '2'.	g		insertEdgeConnecting: (v at: 1)		and: (v at: 1)		containing: '3'.	g		insertEdgeConnecting: (v at: 2)		and: (v at: 3)		containing: '4'.	g		insertEdgeConnecting: (v at: 2)		and: (v at: 4)		containing: '5'.	g		insertEdgeConnecting: (v at: 3)		and: (v at: 4)		containing: '6'.	^g! !!ALGraphTest methodsFor: 'sample graphs' stamp: 'CDavidShaffer 9/5/2019 15:47'!aSimpleGraph	"Used by various tests"		| g v |	g := self graphSpecies new.	v := OrderedCollection new.	v add: (g insertVertexContaining: 'A').	v add: (g insertVertexContaining: 'B').	v add: (g insertVertexContaining: 'C').	v add: (g insertVertexContaining: 'D').	v add: (g insertVertexContaining: 'E').	g		insertEdgeConnecting: (v at: 1)		and: (v at: 2)		containing: '1'.	g		insertEdgeConnecting: (v at: 1)		and: (v at: 3)		containing: '2'.	g		insertEdgeConnecting: (v at: 4)		and: (v at: 5)		containing: '4'.	g		insertEdgeConnecting: (v at: 5)		and: (v at: 1)		containing: '5'.	g		insertEdgeConnecting: (v at: 3)		and: (v at: 5)		containing: '6'.	^g! !!ALGraphTest methodsFor: 'sample graphs' stamp: 'CDavidShaffer 9/5/2019 15:47'!aDisconnectedGraph	"Used by various tests"		| g v |	g := self graphSpecies new.	v := OrderedCollection new.	v add: (g insertVertexContaining: 'A').	v add: (g insertVertexContaining: 'B').	v add: (g insertVertexContaining: 'C').	v add: (g insertVertexContaining: 'D').	v add: (g insertVertexContaining: 'E').	g		insertEdgeConnecting: (v at: 1)		and: (v at: 2)		containing: '1'.	g		insertEdgeConnecting: (v at: 2)		and: (v at: 1)		containing: '2'.	g		insertEdgeConnecting: (v at: 2)		and: (v at: 3)		containing: '3'.	g		insertEdgeConnecting: (v at: 4)		and: (v at: 5)		containing: '4'.	^g! !!ALGraphTest methodsFor: 'accessing' stamp: 'CDavidShaffer 9/5/2019 15:48'!graphSpecies		^Smalltalk at: #ALGraph! !!ALGraphTest methodsFor: 'tests' stamp: 'CDavidShaffer 1/9/2022 16:26'!test3	"To pass this test you must have correctly implemented 	degree:, removeEdge:, removeVertex:, vertexOppositeTo:on:"	| g v e |	g := self graphSpecies new.	v := OrderedCollection new.	v add: (g insertVertexContaining: 'A').	v add: (g insertVertexContaining: 'B').	v add: (g insertVertexContaining: 'C').	v add: (g insertVertexContaining: 'D').	v add: (g insertVertexContaining: 'E').	e := OrderedCollection new.	e		add: (g insertEdgeConnecting: (v at: 1) and: (v at: 2) containing: '1').	e		add: (g insertEdgeConnecting: (v at: 1) and: (v at: 3) containing: '2').	e		add: (g insertEdgeConnecting: (v at: 2) and: (v at: 2) containing: '3').	e		add: (g insertEdgeConnecting: (v at: 4) and: (v at: 5) containing: '4').	e		add: (g insertEdgeConnecting: (v at: 5) and: (v at: 1) containing: '5').	e		add: (g insertEdgeConnecting: (v at: 3) and: (v at: 5) containing: '6').	e		add: (g insertEdgeConnecting: (v at: 2) and: (v at: 2) containing: '7').	self assert: (g degree: (v at: 5)) equals: 3.	self assert: (g degree: (v at: 1)) equals: 3.	self assert: (g degree: (v at: 2)) equals: 5.	self		assert: (g vertexOppositeTo: (v at: 2) on: (e at: 7))		identicalTo: (v at: 2).	self		assert: (g removeEdge: (g edgeContaining: '7'))		identicalTo: (e at: 7).	self assert: (g degree: (v at: 2)) equals: 3.	e		at: 7		put: (g insertEdgeConnecting: (v at: 2) and: (v at: 2) containing: '7').	self assert: g edges size equals: 7.	self assert: g vertices size equals: 5.	self		assert: (g removeVertex: (g vertexContaining: 'E'))		identicalTo: (v at: 5).	self assert: (g vertices includes: (v at: 5)) not.	self		deny:			(g edges includes: (e at: 4)) | (g edges includes: (e at: 5))				| (g edges includes: (e at: 6)).	self		assert: (g removeVertex: (g vertexContaining: 'C'))		identicalTo: (v at: 3).	self assert: (g vertices includes: (v at: 3)) not.	self		assert:			(g edges				anySatisfy: [ :edge | (edge == (e at: 6)) | (edge == (e at: 2)) ])				not.	"Remove a vertex with a self loop"	self		assert: (g removeVertex: (g vertexContaining: 'B'))		identicalTo: (v at: 2).	self assert: g edges size equals: 0! !!ALGraphTest methodsFor: 'tests' stamp: 'CDavidShaffer 9/5/2019 15:50'!test0	"To pass this test you must have defined the class ALGraph"		self assert: (Smalltalk at: #ALGraph) notNil! !!ALGraphTest methodsFor: 'tests' stamp: 'CDavidShaffer 1/9/2022 16:24'!test1	"To pass this test you must have correctly implemented 	insertVertexContaining:, insertEdgeConnecting:and:containing:"		| g v1 v2 e1 e2 |	g := self graphSpecies new.	v1 := g insertVertexContaining: 'A'.	v2 := g insertVertexContaining: 'B'.	e1 := g insertEdgeConnecting: v1 and: v2 containing: '1'.	e2 := g insertEdgeConnecting: v1 and: v1 containing: '2'.	self assert: g edges size equals: 2.	self assert: g vertices size equals: 2.	self assert: (g vertices anySatisfy: [:v | v == v1]).	self assert: (g vertices anySatisfy: [:v | v == v2]).	self assert: (g edges anySatisfy: [:e | e == e1]).	self assert: (g edges anySatisfy: [:e | e == e2]).	self assert: v1 graph = g & (v2 graph = g).	self assert: e1 graph = g & (e2 graph = g).	self		assert: (v1 incidentEdges includes: e1) & (v1 incidentEdges includes: e2).	self assert: (v2 incidentEdges includes: e1)! !!ALGraphTest methodsFor: 'tests' stamp: 'CDavidShaffer 1/9/2022 16:26'!test5	"To pass this test you must have correctly implemented 	depthFirstTraveralFrom:visitor:"	| visitor g |	visitor := CollectingVisitor new.	g := self aDisconnectedGraph.	g depthFirstTraversalFrom: (g vertexContaining: 'E') visitor: visitor.	self assert: visitor vertices size equals: 2.	self assert: (visitor vertices includes: (g vertexContaining: 'E')).	self assert: (visitor vertices includes: (g vertexContaining: 'D')).	visitor := CollectingVisitor new.	g depthFirstTraversalFrom: (g vertexContaining: 'B') visitor: visitor.	self assert: visitor vertices size equals: 3.	self assert: (visitor vertices includes: (g vertexContaining: 'A')).	self assert: (visitor vertices includes: (g vertexContaining: 'B')).	self assert: (visitor vertices includes: (g vertexContaining: 'C')).	" now check ordering "	g := self aSimpleGraph.	visitor := CollectingVisitor new.	g depthFirstTraversalFrom: (g vertexContaining: 'B') visitor: visitor.	self		assert:			(visitor vertices indexOf: (g vertexContaining: 'D'))				< (visitor vertices indexOf: (g vertexContaining: 'E')).	self		assert:			(visitor vertices indexOf: (g vertexContaining: 'E'))				< (visitor vertices indexOf: (g vertexContaining: 'A')).	self		assert:			(visitor vertices indexOf: (g vertexContaining: 'C'))				< (visitor vertices indexOf: (g vertexContaining: 'A')).	self		assert:			(visitor vertices indexOf: (g vertexContaining: 'A'))				< (visitor vertices indexOf: (g vertexContaining: 'B'))! !!ALGraphTest methodsFor: 'tests' stamp: 'CDavidShaffer 9/5/2019 15:49'!test6	"To pass this test you must have correctly implemented isConnected"		| g |	g := self aGraphWithLoops.	self assert: g isConnected.	g := self aGraphWithParallelEdges.	self assert: g isConnected.	g := self aCompleteGraph.	self assert: g isConnected.	g := self aSimpleGraph.	self assert: g isConnected.	g := self aDisconnectedGraph.	self assert: g isConnected not! !!ALGraphTest methodsFor: 'tests' stamp: 'CDavidShaffer 1/9/2022 16:25'!test2	"To pass this test you must have correctly implemented 	endVertices:, adjacentVertices:"	| g v1 v2 e1 e2 |	g := self graphSpecies new.	v1 := g insertVertexContaining: 'A'.	v2 := g insertVertexContaining: 'B'.	e1 := g insertEdgeConnecting: v1 and: v2 containing: '1'.	e2 := g insertEdgeConnecting: v1 and: v1 containing: '2'.	self assert: g edges size equals: 2.	self assert: g vertices size equals: 2.	self assert: ((g endVertices: e1) includes: v1).	self assert: ((g endVertices: e1) includes: v2).	self assert: ((g endVertices: e2) includes: v1).	self deny: ((g endVertices: e2) includes: v2).	self assert: (g edgeContaining: '1') identicalTo: e1.	self assert: (g edgeContaining: '2') identicalTo: e2.	self assert: ((g adjacentVertices: v1) includes: v2).	self assert: ((g adjacentVertices: v1) includes: v1).	self assert: (g vertexContaining: 'A') identicalTo: v1.	self assert: (g vertexContaining: 'B') identicalTo: v2.	self assert: (g isVertex: v1 adjacentTo: v1).	self assert: (g isVertex: v1 adjacentTo: v2).	self assert: (g isVertex: v2 adjacentTo: v1).	self deny: (g isVertex: v2 adjacentTo: v2)! !!ALGraphTest methodsFor: 'tests' stamp: 'CDavidShaffer 9/5/2019 15:50'!test4	"To pass this test you must have correctly implemented isSimple and isComplete"		| g |	g := self aGraphWithLoops.	self deny: g isSimple.	g := self aGraphWithParallelEdges.	self deny: g isSimple.	g := self aSimpleGraph.	self assert: g isSimple.	g := self aCompleteGraph.	self assert: g isComplete.	g := self aSimpleGraph.	self deny: g isComplete.	g := self anAlmostCompleteGraphWithLoops.	self deny: g isComplete! !